// Generated by CoffeeScript 1.4.0
var Either, Future, Left, None, Option, Right, Some, f,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Either = (function() {

  function Either() {}

  return Either;

})();

Left = (function(_super) {

  __extends(Left, _super);

  function Left(message) {
    this.message = message;
  }

  Left.prototype.map = function() {
    return this;
  };

  Left.prototype.flatMap = function() {
    return this;
  };

  return Left;

})(Either);

Right = (function(_super) {

  __extends(Right, _super);

  function Right(value) {
    this.value = value;
  }

  Right.prototype.map = function(f) {
    return Right(this.value);
  };

  Right.prototype.flatMap = function(f) {
    return f(this.value);
  };

  return Right;

})(Either);

Option = (function() {

  function Option() {}

  return Option;

})();

Some = (function(_super) {

  __extends(Some, _super);

  function Some(value) {
    this.value = value;
  }

  Some.prototype.map = function(f) {
    return Some(f(this.value));
  };

  Some.prototype.flatMap = function(f) {
    return f(this.value);
  };

  return Some;

})(Option);

None = (function(_super) {

  __extends(None, _super);

  function None() {
    return None.__super__.constructor.apply(this, arguments);
  }

  None.prototype.map = function() {
    return None;
  };

  None.prototype.flatMap = function() {
    return None;
  };

  return None;

})(Option);

Future = (function() {

  Future.prototype.map = function(atob) {
    var _this = this;
    this.atob = atob;
    return new Future(function(callback) {
      _this.callback = callback;
    });
  };

  Future.prototype.flatMap = function(atofb) {
    var _this = this;
    this.atofb = atofb;
    return new Future(function(callback) {
      _this.callback = callback;
    });
  };

  function Future(fb) {
    var _this = this;
    fb(function(result) {
      _this.result = result;
      if (_this.atob) {
        return _this.callback(_this.atob(result));
      } else if (_this.atofb) {
        return (_this.atofb(result)).map(_this.callback);
      }
    });
  }

  return Future;

})();

f = function(m) {
  return new Future(function(callback) {
    return setTimeout(function() {
      return callback(m);
    }, 1);
  });
};

f('HI').flatMap(function(v0) {
  return f(v0 + '!');
}).flatMap(function(v1) {
  return f('<' + v1 + '>');
}).map(function(v2) {
  return console.log(v2);
});

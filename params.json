{"tagline":"Coffee Script Starter Project","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Americano","body":"# Americano\r\n\r\n> Americano is coffee-script on rails.\r\n\r\nAmericano is _not_ a framework.\r\nThere is no Americano module to include in your project,\r\nyou are free to write your app however you like.\r\nWhat Americano does do however is generate a lot of code you can further customize.\r\n\r\nAmericano is about sensible defaults.\r\n\r\n## Goals\r\n\r\n### Code Generation\r\n\r\n- Generate basic MVC scaffolding from a model description\r\n\r\n### Development Mode\r\n\r\nA development mode should exist that aids rapid development.\r\nChanges in code should be reflected immediately in the application.\r\n\r\n- re-compile and reload code on changes\r\n- use un-combined stylus in debug mode\r\n- use un-combined require.js scripts\r\n\r\n### Release Mode\r\n\r\nRelease mode is all about efficiency.\r\nResources should be combined when possible.\r\nStatic assets are pre-compiled to Javascript, CSS and HTML.\r\n\r\n- combine and compact require.js code\r\n- compile and compact stylus code into a single `.css` file\r\n\r\n### Database\r\n\r\nDatabases need to be upgraded,\r\nso migrations should be generated that can be tested and then applied in production.\r\n\r\n- generate database migrations\r\n\r\n### Vendor Code\r\n\r\nIt shouldn't be a nightmare to include Twitter Bootstrap,\r\nand other 3rd party projects that require small tweaks or customizations.\r\n\r\n- allow compilation of vendor code\r\n\r\n## Overview\r\n\r\n### Layout\r\n\r\n    app/                    <- only MVC code\r\n        models/             <- database wiring\r\n        views/              <- logic-less templates\r\n        routes/             <- request handlers\r\n    \r\n    client/                 <- compiled client resources\r\n        less/               <- LESS stylesheets\r\n        coffee/             <- coffee scripts for browser\r\n    \r\n    config/                 <- all application defaults\r\n        router.coffee       <- routes configuration\r\n        config.coffee       <- application configuration\r\n    \r\n    db/                     <- database schemas and migrations\r\n    lib/                    <- shared modules\r\n    script/                 <- scripts and tools\r\n    test/                   <- all tests\r\n    vendor/                 <- third party code\r\n    \r\n    assets.json             <- Rude assets file\r\n    package.json            <- standard Node.js package\r\n    server.coffee           <- imports application environment\r\n    \r\n    [M/C]akefile            <- provides application targets\r\n    \r\n    # Possibly Not Checked Into Git #\r\n    \r\n    Procfile                <- define runnable processes\r\n    public/                 <- symlink to assets directory\r\n    tmp/                    <- temporary files\r\n    \r\n    # Definitely Not Checked Into Git #\r\n    \r\n    .env                    <- environment configurations\r\n\r\n### Rails\r\n\r\nAmericano gets you going quickly by generating boiler plate.\r\n\r\n    $ script/generate-scaffolding $MODEL $PROP1,$PROP2\r\n\r\nFor example, generate `user` scaffolding with:\r\n    \r\n    $ script/generate-scaffolding user fname,lname,email\r\n    [INFO] Wrote app/views/users\r\n    [INFO] Wrote app/models/users.coffee\r\n    [INFO] Wrote db/migrations/20121224100855-user.js\r\n    [INFO] Wrote app/routes/users.coffee\r\n    [INFO] Appended user to config/router.coffee\r\n    [INFO] Appended user to app/routes/index.coffee\r\n    [INFO] Appended user to app/models/index.coffee\r\n    \r\n\r\n### Imports\r\n\r\nThe `lib` module is symbolically linked into\r\n`node_modules` and directly accessible via\r\n\r\n    require('lib/SUB_MODULE_NAME')\r\n\r\nThe `lib` module should include all your application-independent code.\r\nThe `lib` module itself should export _no_ content, only submodules.\r\nSubmodules should be independent of each other.\r\n\r\n### Makeable Targets\r\n\r\nMakeable targets should ready the application for running,\r\nbut never actually run the application.\r\nIt is encouraged to create more targets as necessary,\r\nbut the following targets are _always_ expected.\r\n\r\n    clean              <- delete all generated files\r\n    develop            <- ready app for development\r\n    release            <- ready app for production\r\n\r\nEach target should work with the given Procfile.\r\nIf necessary, the Procfile can be auto-generated.\r\n\r\nThe `release` target should combine and compact public scripts,\r\nstyle sheets, and perform other necessary optimizations.\r\n\r\nThe `develop` target should auto-restart on changes to source code,\r\nand be debugger friendly.\r\nThere should be no code compaction, and no optimizations.\r\n\r\n## Deployment\r\n\r\nThe application can and _should_ be deployed directly from the Git repository.\r\nEnvironment variables are expected to be provided for attached resources,\r\nand other deployment-dependent settings.\r\n\r\n"}